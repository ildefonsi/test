version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: db
    mem_limit: 750m
    restart: unless-stopped
    environment:
      POSTGRES_DB: gestion_usuarios
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      # Volumen nombrado para la persistencia de datos
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data

#      # Montaje del archivo SQL usando la sintaxis larga
#      - type: bind
#        source: ./database-schema.sql
#        target: /docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - gestion-usuarios-network

  # Backend Spring Boot
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: backend
    mem_limit: 750m
    restart: unless-stopped
    environment:
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/gestion_usuarios
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      APP_JWT_SECRET: miClaveSecretaParaJWTQueDebeSerMuyLargaYSegura123456789
      APP_JWT_EXPIRATION: 86400000
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      - postgres
    networks:
      - gestion-usuarios-network
#    volumes:
#      - ./logs:/app/logs

  # Frontend React
  frontend:
    build:
      context: ./frontend
#     dockerfile: Dockerfile.frontend.DEV
      dockerfile: Dockerfile.frontend.PROD
    container_name: frontend
    mem_limit: 500m
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8080/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - gestion-usuarios-network

volumes:
  postgres_data:

networks:
  gestion-usuarios-network:
    driver: bridge
